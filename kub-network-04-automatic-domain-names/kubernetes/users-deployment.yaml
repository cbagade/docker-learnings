apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-deployment
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: users
  template:
    metadata:
      labels:
        app: users
    spec:
      containers:
        - name: users
          image: cbagade/kub-demo-users:latest
          env:
            - name: AUTH_ADDRESS
              #value: "10.96.28.237"
              value: "auth-service.prep"




# cd /home/chandra/docker-learnings/kub-network-04-automatic-domain-names/users-api
# docker build -t cbagade/kub-demo-users:latest .
# docker push cbagade/kub-demo-users:latest
# cd /home/chandra/docker-learnings/kub-network-04-automatic-domain-names/auth-api
# docker build -t cbagade/kub-demo-auth:latest .
# docker push cbagade/kub-demo-auth:latest
# cd /home/chandra/docker-learnings/kub-network-04-automatic-domain-names/kubernetes
# also look at users-app.js
# ${process.env.AUTH_SERVICE_SERVICE_HOST} is auto generated by kubernetes
# ${process.env.AUTH_ADDRESS} is also demoed , passing from this users-deployment.yaml  (see other auto approach , demoed last)
# kubectl apply -f auth-service.yaml -f users-service.yaml
# take clusterId of auth service, update in this deployment
# kubectl apply -f auth-deployment.yaml -f users-deployment.yaml 
# http://localhost:30004/signup -> {     "email":"cbagade@yahoo.com",     "password":"devops" }
# http://localhost:30004/login -> {     "email":"cbagade@yahoo.com",     "password":"devops" }
# now this deployment yaml file the env variable for AUTH_ADDRESS can be used as DNS
# DNS would be service name . namespace
# kubectl config view --minify | grep namespace:
# kubectl apply -f auth-deployment.yaml -f users-deployment.yaml 
# http://localhost:30004/signup -> {     "email":"cbagade@yahoo.com",     "password":"devops" }
# http://localhost:30004/login -> {     "email":"cbagade@yahoo.com",     "password":"devops" }