version: "3.8"
services:
  mongodb:
    image: 'mongo'
    volumes: 
      - data:/data/db
    # without container name, it will name it with folder name
    container_name: mongodb
    # environment: 
    #   MONGO_INITDB_ROOT_USERNAME: chandra
    #   MONGO_INITDB_ROOT_PASSWORD: chandra
      # - MONGO_INITDB_ROOT_USERNAME=chandra
    env_file: 
      - ./env/mongo.env
  backend:
    # without container name, it will name it with folder name
    container_name: backend
    build: ./backend
    # following is longer version of above one
    # suppose you are coping some folder from Dockerfile, the context should be set
    # to that folder which includes everything
    # build:
    #   context: ./backend
    #   dockerfile: Dockerfile
    #   args:
    #     some-arg: 1
    ports:
      # host port:container internal port
      - '80:80'
    env_file: 
      - ./env/backend.env
    # mongo container will be created first
    depends_on:
      - mongodb
# named volumes need to be listed
# no need to anonymous and bind volumes
volumes: 
  data:

# docker-compose up -d
# remove everything except volume
# docker compose down
# remove everything including volume
# docker compose down -v
# notice name of mongo service is mongodb in this file
# same has been used in app.js for connections i.e., @mongodb:27017, though names generated by docker-compose
# for the containers are different (without container_name: instriction above) 
# following command will always cause docker image to build otherwise without --build it will build first time
# and will use same image next time when it able to find that
# docker-compose up --build
# for build images (just image building ), use (this won't start containers)
# docker-compose build
# docker-compose up will include above build step
# 
